This is the action-based galaxy modelling framework. To get it working on your computer:

1.  Download the repository.
2a. Install the required libraries (presently only GSL).
2b. Although not compulsory, you may want to download and install optional libraries:
    - GLPK for solving linear optimization problems: http://www.gnu.org/software/glpk/
    - CVXOPT for solving linear and quadratic optimization problems: http://cvxopt.org/ - requires Python;
    either GLPK or (preferrably) CVXOPT are required for non-parametric DF modelling.
    - Eigen library for highly optimized linear algebra routines (in its absense the ones from GSL will be used);
    its use slows down compilation quite dramatically, but this more than pays off at runtime.
    http://eigen.tuxfamily.org/
    - UNSIO library for reading/writing N-body snapshots in various formats: http://projets.lam.fr/projects/unsio
    (without it only the text format is supported).
    - Cuba library for multidimensional integration (the alternative is Cubature library that is bundled with this 
    distribution): http://www.feynarts.de/cuba/
    - galpy - this distribution contains a module for galpy, that can be used instead of its built-in potentials,
    orbit integration and action-finding routines.
Note: to use the Python extension, any external libraries to be statically linked with it need to be compiled with
    -fPIC flag.
3.  You need to create a file called Makefile.local, which is included by the Makefile and contains path names
    and compiler flags specific to your own computer.
    An example is given below (you will need to change the pathnames).
4.  In order to make the Python extension available for import, it should be either copied to its site-packages 
    folder, or the path to it be added to PYTHONPATH environment variable, as shown in the example below.
    To make it permanently available, you may add this line to .bashrc or its analog.
5.  Typing make compiles everything.

Makefile.local (copy and paste everything below into your file and change where required)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# machine-specific settings

# compiler and linker
CXX       = g++
ARC       = ar
CXXFLAGS += -Wall -Wno-overflow -O3 -I$(SRCDIR) $(DEFINES) -fPIC -fdata-sections -ffunction-sections
LFLAGS   += -fPIC -lgsl -lgslcblas

# check the dirnames
PYFLAGS  += -I/usr/include/python2.6 -I/Library/Python/2.6/site-packages/numpy/core/include -lpython -fno-strict-aliasing

# this flag apparently is only relevant for MacOS and reduces the size of executable files by removing unused code
LFLAGS  += -Wl,-dead_strip

# uncomment (and possibly modify) the three lines below  to use UNSIO library for input/output of N-body snapshots
DEFINES  += -DHAVE_UNSIO
CXXFLAGS += -I/Users/user/Documents/nemo/inc -I/Users/user/Documents/nemo/inc/uns
LFLAGS   += -L/Users/user/Documents/nemo/lib -lunsio -lnemo

# uncomment the three lines below and adjust the paths  to use Cuba library for multidimensional integration 
# (otherwise use Cubature library bundled with the code)
DEFINES  += -DHAVE_CUBA
CXXFLAGS += -I/Users/user/Documents/soft/cuba-4.2
LFLAGS   +=   /Users/user/Documents/soft/cuba-4.2/libcuba.a


